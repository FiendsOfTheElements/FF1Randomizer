@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using FF1Lib;


<div id="presets" class="tabcontent framed-content clearfix @(noTabLayout ? "no-tab" : "") @(IsOpen ? "" : "collapsed")">
	<h3 class="@(IsOpen ? "" : "h3-collapsed")"><a class="@(noTabLayout ? "collapsible-header" : "")" @onclick="(() => IsOpen = (!noTabLayout || !IsOpen))">Start a Game</a></h3>
	@if (IsOpen)
	{
		<p>These presets allow you to get into the game and start playing instantly.</p>

		<h4>Standard Presets</h4>
		<a class="preset-button styled-button @((selectedPresetId == "Beginner") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Beginner"))">Select</a>
		<p class="preset-paragraph"><strong>Beginner:</strong> Good for first-time players as it crafts an easy-to-understand run for those looking to get into randomizers.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Improved_Vanilla") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Improved_Vanilla"))">Select</a>
		<p class="preset-paragraph"><strong>Improved Vanilla:</strong> Puts in bug fixes to the original game but maintains the overall basic FF experience.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Entrance_Floor_Shuffle") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Entrance_Floor_Shuffle"))">Select</a>
		<p class="preset-paragraph"><strong>Floor and Entrance Shuffle:</strong> Mixes things up by shuffling all entrances and floors.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Shard_Hunt") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Shard_Hunt"))">Select</a>
		<p class="preset-paragraph"><strong>Shard Hunt:</strong> Instead of lighting the fours orbs, seek out and collect shards hidden in random treasure chests to remove the Black Orb.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Chaos_Rush") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Chaos_Rush"))">Select</a>
		<p class="preset-paragraph"><strong>Chaos Rush:</strong> Gives you free orbs, removes the requirement for Key and Lute, and tasks you with simply getting to Chaos, and killing them, as fast as possible.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Chaos_Rampage") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Chaos_Rampage"))">Select</a>
		<p class="preset-paragraph"><strong>Chaos Rampage:</strong> Similar to Chaos Rush, but all four fiends need to be defeated.</p>

		<a class="preset-button styled-button @((selectedPresetId == "ST2021_Pods") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("ST2021_Pods"))">Select</a>
		<p class="preset-paragraph"><strong>Spring Tournament 2021 Pods:</strong> With a free canoe and randomized key locations inside dungeons, this flagset was the foundation of Spring Tournament 2021.</p>

		<h4>User Presets</h4>
		<p>
			@foreach (var preset in localPresets)
			{
				<span style="white-space:nowrap" @key="preset" class="oneline">
					<a class="preset-button styled-button @((selectedPresetId == @preset) ? "clicked" : "")" @onclick="@(() => LoadLocalPreset(@preset))">@preset</a>
					<a class="preset-button styled-button preset-close" @onclick="@(() => DeleteLocalPreset(@preset))">X</a>
				</span>
			}
		</p>

		<p>
			Current:
			<input type="text" id="presetNameInput" @bind="presetName" />
		</p>

		<p>
			<a class="styled-button" @onclick="@(() => SavePreset(false))">Save Preset</a>
			<a class="styled-button" @onclick="@(() => SavePreset(true))">Export to JSON</a>
		</p>

		<p>
			Load from JSON:
			<input type="file" id="presetInput" @onchange="OnPresetChanged" />
		</p>
		<div class="clear-it"></div>
	}
</div>


@code { [Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
	[Parameter] public Action<string> SetStatusMessage { get; set; }
	[Parameter] public Action SetDefaultLoaded { get; set; }
	[Parameter] public string StatusMessage { get; set; }
	[Parameter] public bool loadDefault { get; set; }
	[Parameter] public string[] localPresets { get; set; } = { };
	[Parameter] public bool noTabLayout { get; set; }
	[Parameter] public bool IsOpen { get; set; } = true;
	[Parameter] public Action<string> SetPresetName { get; set; }
	[Parameter] public string presetName { get; set; }

	private string selectedPresetId = "";

	protected override async void OnInitialized()
	{
		if (loadDefault)
		{
			var uri = new Uri(NavigationManager.Uri);
			if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("f", out var flags))
			{
				await LoadStandardPreset("default");
			}
			SetDefaultLoaded();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await UpdatePresets();
	}

	async Task UpdatePresets()
	{
		localPresets = await JSRuntime.InvokeAsync<string[]>("listLocalPresets");
	}

	async Task LoadStandardPreset(string name)
	{
		selectedPresetId = name;
		var json = await JSRuntime.InvokeAsync<string>("computePreset", name);
		LoadFromJson(json);
	}

	async Task LoadLocalPreset(string name)
	{
		selectedPresetId = name;
		var json = await JSRuntime.InvokeAsync<string>("loadLocalPreset", name);
		LoadFromJson(json);
	}

	public void LoadFromJson(string json)
	{
		var preset = Flags.FromJson(json);

		Flags.Flags = preset.flags;

		if (preset.log.Any())
		{
			SetStatusMessage.Invoke("<p>" + preset.name + " was loaded with errors:</p>" + "<p>" + string.Join("</p><p>", preset.log) + "</p>");
		}
		else
		{
			SetStatusMessage.Invoke(preset.name + " preset successfully loaded.");
		}

		presetName = preset.name;
		SetPresetName(presetName);
		StateHasChanged();
	}

	async Task DeleteLocalPreset(string presetName)
	{
		await JSRuntime.InvokeAsync<string>("deleteLocalPreset", presetName);
		SetStatusMessage.Invoke(presetName + " local preset deleted.");
		await UpdatePresets();
	}

	async Task SavePreset(bool download)
	{
		System.Text.Json.JsonSerializerOptions options = new System.Text.Json.JsonSerializerOptions();
		options.IgnoreReadOnlyProperties = true;
		options.WriteIndented = true;

		Flags.Preset preset = new Flags.Preset();
		preset.Name = presetName;
		SetPresetName(presetName);
		preset.Flags = Flags.Flags;

		var json = System.Text.Json.JsonSerializer.Serialize(preset, options);
		var encoded = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));

		if (download)
		{
			await JSRuntime.InvokeAsync<object>("downloadFile", $"{presetName}.json", encoded);
		}
		else
		{
			await JSRuntime.InvokeAsync<object>("storePreset", presetName, json);
			if (localPresets.Contains(presetName))
			{
				SetStatusMessage.Invoke($"Saved preset {presetName} updated.");
			}
			else
			{
				SetStatusMessage.Invoke($"Saved {presetName} to local presets.");
			}
			await UpdatePresets();
		}
	}

	async Task OnPresetChanged(ChangeEventArgs e)
	{
		try
		{
			var json = await JSRuntime.InvokeAsync<string>("handlePresetSelect", "presetInput");

			var preset = Flags.FromJson(json);

			Flags.Flags = preset.flags;

			if (preset.log.Any())
			{
				SetStatusMessage.Invoke("<p>" + preset.name + " was loaded from json with errors:</p>" + "<p>" + string.Join("</p><p>", preset.log) + "</p>");
			}
			else
			{
				SetStatusMessage.Invoke($"{preset.name} preset successfully loaded from json file.");
			}

			presetName = preset.name;
			SetPresetName(presetName);
		}
		catch (Exception ex)
		{
			SetStatusMessage.Invoke("Preset load failed: " + ex.ToString());
		}
		StateHasChanged();
	}
}
