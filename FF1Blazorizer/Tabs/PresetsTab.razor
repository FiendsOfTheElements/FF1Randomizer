@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using FF1Lib;
@using System.IO;

<div id="presets" class="tabcontent framed-content clearfix @(noTabLayout ? "no-tab" : "") @(IsOpen ? "" : "collapsed")">
	<h3 class="@(IsOpen ? "" : "h3-collapsed")"><a class="@(noTabLayout ? "collapsible-header" : "")" @onclick="(() => IsOpen = (!noTabLayout || !IsOpen))">Start a Game</a></h3>
	@if (IsOpen)
	{
		<h4>Starter Presets</h4>
		<p>These presets showcase some of the major game variations, while also designed to be accessible to newer players.  When you are ready for more challenge, try the Intermediate presets, or browse the tabs to start customizing your own game.<br>
		Questions?  Join the <a href="https://discord.gg/5kTRT4AyvT">FFR Community Discord</a>.</p>

		<div class="col1">

		<a class="preset-button styled-button @((selectedPresetId == "Beginner") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Beginner"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="beginnerPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Beginner</strong></ToolTipBox>
		Introduction to the randomizer, and the basis for most of the other presets.</p>

		<a class="preset-button styled-button @((selectedPresetId == "Oops_All_Loose") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Oops_All_Loose"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="oopsAllLooseToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Oops, All Loose!</strong></ToolTipBox>
		All key items are loose, which means they can be found in any chest.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Shard_Hunt") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Shard_Hunt"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="shardHuntPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Shard Hunt</strong></ToolTipBox>
		Instead of lighting 4 Orbs, you must find 28 Shards to unlock the Temple of Fiends.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Floaterless") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Floaterless"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="floaterlessPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Floaterless</strong></ToolTipBox>
		Removes the Floater from the game, so you can't get the airship, but adds new docks so you can get everywhere you need to go.
		</p>

		</div>

		<div class="col2">

		<a class="preset-button styled-button @((selectedPresetId == "Improved_Vanilla") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Improved_Vanilla"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="improvedVanillaPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Improved Vanilla</strong></ToolTipBox>
		Applies the bugfixes and quality-of-life improvements to the base game, but does not randomize anything.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Entrance_Floor_Shuffle") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Entrance_Floor_Shuffle"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="entranceFloorShufflePresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Entrance and Floor Shuffle</strong></ToolTipBox>
		Overworld entrances (except for towns) are shuffled together, as are cave and dungeon floors.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Procgen_Overworld") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Procgen_Overworld"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="procgenOWPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Procedurally Generated Overworld</strong></ToolTipBox>
		Explore a completely new, randomly generated overworld.
		</p>

		</div>

		<div class="col1 full">
		<h4>Intermediate Presets</h4>
		<p>For players looking for more challenge.</p>
		</div>

		<div class="col1">

		<a class="preset-button styled-button @((selectedPresetId == "Chaos_Rush") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Chaos_Rush"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="chaosRushToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Chaos Rush</strong></ToolTipBox>
		You can enter the final dungeon immediately at the start of the game.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Free_Enterprise") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Free_Enterprise"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="freeEnterpriseToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Free Enterprise</strong>
		</ToolTipBox>
		All bosses rush modeled after the open world gameplay style of <a href="http://ff4fe.com/">FF4: Free Enterprise</a>.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Hidden_Chaos") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Hidden_Chaos"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="hiddenChaosToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Hidden Chaos</strong></ToolTipBox>
		Chaos is hidden in a random chest and must be found to be defeated.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "NOverworld") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("NOverworld"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="noverworldShufflePresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>NOverworld</strong></ToolTipBox>
		Removes the overworld from the game - towns and dungeons are connected directly by stairs and warps.
		</p>

		</div>
		<div class="col2">

		<a class="preset-button styled-button @((selectedPresetId == "Deep_Dungeon") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Deep_Dungeon"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="deepDungeonPresetToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Deep Dungeon</strong></ToolTipBox>
		Turn Coneria Castle into a 52-floor completely procedurally generated dungeon, leading to Chaos.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Over_Randomizer") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Over_Randomizer"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="overRandomizerToolTipBox" UpdateToolTip="@UpdateToolTipID"><strong>Over Randomizer</strong></ToolTipBox>
		The randomizer will give you entirely new weapons, armor, spells, enemies, and bosses.
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Lichs_Revenge") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Lichs_Revenge"))">Select</a>
		<p class="preset-paragraph">
		<ToolTipBox id="lichRevengePresetCheckBox" UpdateToolTip="@UpdateToolTipID"><strong>Lich's Revenge</strong></ToolTipBox>
		Lich is having his revenge, unleashing his undead hordes upon the world!
		</p>

		</div>


		<div class="col1 full">
		<h4>Tournament Presets</h4>
		<p>Fall League 2022</p>

        <a class="preset-button styled-button @((selectedPresetId == "Fall_League_-_E-F_Shuffle") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Fall_League_-_E-F_Shuffle"))">Select</a>
		<p class="preset-paragraph">
		<label><strong>Week 1 - Entrance/Floor Shuffle + Shard Hunt</strong></label><br>
		</p>

		<a class="preset-button styled-button disabled">Select</a>
		<p class="preset-paragraph">
		<label><strong>Week 2 - Feedback Week (no preset; see community discord)</strong></label><br>
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Fall_League_-_Procgen_OW_Oops_All_Loose") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Fall_League_-_Procgen_OW_Oops_All_Loose"))">Select</a>
		<p class="preset-paragraph">
		<label><strong>Week 3 - ProcGen OW Oops All Loose</strong></label><br>
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Fall_League_-_0_Loose_3_Orbs") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Fall_League_-_0_Loose_3_Orbs"))">Select</a>
		<p class="preset-paragraph">
		<label><strong>Week 4 - Zero Loose and 3 Orbs</strong></label><br>
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Fall_League_-_Noverworld") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Fall_League_-_Noverworld"))">Select</a>
		<p class="preset-paragraph">
		<label><strong>Semi-Finals - NoOverworld</strong></label><br>
		</p>

		<a class="preset-button styled-button @((selectedPresetId == "Fall_League_-_Relay_Race") ? "clicked" : "")" @onclick="@(() => LoadStandardPreset("Fall_League_-_Relay_Race"))">Select</a>
		<p class="preset-paragraph">
		<label><strong>Finals - Relay Race</strong></label><br>
		</p>
        </div>

		<div class="col1 full">
		<h4>User Presets</h4>
		<p>
			@foreach (var preset in localPresets)
			{
				<span style="white-space:nowrap" @key="preset" class="oneline">
					<a class="preset-button styled-button @((selectedPresetId == @preset) ? "clicked" : "")" @onclick="@(() => LoadLocalPreset(@preset))">@preset</a>
					<a class="preset-button styled-button preset-close" @onclick="@(() => DeleteLocalPreset(@preset))">X</a>
				</span>
			}
		</p>

		<p>
			Current:
			<input type="text" id="presetNameInput" @bind="presetName" />
		</p>

		<p>
			<a class="styled-button" @onclick="@(() => SavePreset(false))">Save Preset</a>
			<a class="styled-button" @onclick="@(() => SavePreset(true))">Export to JSON</a>
		</p>

		<p>
			Load from JSON:
			<input type="file" id="presetInput" @onchange="OnPresetChanged" />
		</p>

		<h3></h3>

		<ToolTipBox UpdateToolTip="@UpdateToolTipID" Id="importResourcePack"><h4>Import Resource Pack</h4></ToolTipBox>
		<input type="file" id="importResourcePackInput" accept=".zip" @onchange="@OnImportResourcePack" />

		</div>

		<div class="clear-it"></div>
	}
</div>


@code { [Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
	[Parameter] public Action<string> SetStatusMessage { get; set; }
	[Parameter] public Action SetDefaultLoaded { get; set; }
	[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
	[Parameter] public string StatusMessage { get; set; }
	[Parameter] public bool loadDefault { get; set; }
	[Parameter] public string[] localPresets { get; set; } = { };
	[Parameter] public bool noTabLayout { get; set; }
	[Parameter] public bool IsOpen { get; set; } = true;
	[Parameter] public Action<string> SetPresetName { get; set; }
	[Parameter] public string presetName { get; set; }

	private string selectedPresetId = "";

	protected override async void OnInitialized()
	{
		if (loadDefault)
		{
			var uri = new Uri(NavigationManager.Uri);
			if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("f", out var flags))
			{
				await LoadStandardPreset("default");
			}
			SetDefaultLoaded();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await UpdatePresets();
	}

	async Task UpdatePresets()
	{
		localPresets = await JSRuntime.InvokeAsync<string[]>("listLocalPresets");
	}

	async Task LoadStandardPreset(string name)
	{
		selectedPresetId = name;
		var json = await JSRuntime.InvokeAsync<string>("computePreset", name);
		LoadFromJson(json);
	}

	async Task LoadLocalPreset(string name)
	{
		selectedPresetId = name;
		var json = await JSRuntime.InvokeAsync<string>("loadLocalPreset", name);
		LoadFromJson(json);
	}

	public void LoadFromJson(string json)
	{
		var preset = Flags.FromJson(json);

		Flags.Flags = preset.flags;

		if (preset.log.Any())
		{
			SetStatusMessage.Invoke("<p>" + preset.name + " was loaded with errors:</p>" + "<p>" + string.Join("</p><p>", preset.log) + "</p>");
		}
		else
		{
			SetStatusMessage.Invoke(preset.name + " preset successfully loaded.");
		}

		presetName = preset.name;
		SetPresetName(presetName);
		StateHasChanged();
	}

	async Task DeleteLocalPreset(string presetName)
	{
		await JSRuntime.InvokeAsync<string>("deleteLocalPreset", presetName);
		SetStatusMessage.Invoke(presetName + " local preset deleted.");
		await UpdatePresets();
	}

	async Task SavePreset(bool download)
	{
		System.Text.Json.JsonSerializerOptions options = new System.Text.Json.JsonSerializerOptions();
		options.IgnoreReadOnlyProperties = true;
		options.WriteIndented = true;

		Flags.Preset preset = new Flags.Preset();
		preset.Name = presetName;
		SetPresetName(presetName);
		preset.Flags = Flags.Flags;

		var json = System.Text.Json.JsonSerializer.Serialize(preset, options);
		var encoded = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));

		if (download)
		{
			await JSRuntime.InvokeAsync<object>("downloadFile", $"{presetName}.json", encoded);
		}
		else
		{
			await JSRuntime.InvokeAsync<object>("storePreset", presetName, json);
			if (localPresets.Contains(presetName))
			{
				SetStatusMessage.Invoke($"Saved preset {presetName} updated.");
			}
			else
			{
				SetStatusMessage.Invoke($"Saved {presetName} to local presets.");
			}
			await UpdatePresets();
		}
	}

	async Task OnPresetChanged(ChangeEventArgs e)
	{
		try
		{
			var json = await JSRuntime.InvokeAsync<string>("handlePresetSelect", "presetInput");

			var preset = Flags.FromJson(json);

			Flags.Flags = preset.flags;

			if (preset.log.Any())
			{
				SetStatusMessage.Invoke("<p>" + preset.name + " was loaded from json with errors:</p>" + "<p>" + string.Join("</p><p>", preset.log) + "</p>");
			}
			else
			{
				SetStatusMessage.Invoke($"{preset.name} preset successfully loaded from json file.");
			}

			presetName = preset.name;
			SetPresetName(presetName);
		}
		catch (Exception ex)
		{
			SetStatusMessage.Invoke("Preset load failed: " + ex.ToString());
		}
		StateHasChanged();
	}

		async Task OnImportResourcePack(ChangeEventArgs e) {
		  try {
		    var content = await JSRuntime.InvokeAsync<string>("handleFileSelect", "importResourcePackInput");
		    if (content == null || content == "") { return; }
	            using (var stream = new MemoryStream(Convert.FromBase64String(content))) {
		       Flags.LoadResourcePackFlags(stream);
		    }
		    Flags.ResourcePack = content;
		  } catch (Exception x) {
			   Console.WriteLine(x.ToString());
		  }
		  StateHasChanged();
		}

}
