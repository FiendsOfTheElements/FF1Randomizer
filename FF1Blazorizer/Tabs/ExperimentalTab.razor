@using FF1Lib;
@using static FF1Lib.FF1Rom;
@using System.IO;
@inject IJSRuntime JSRuntime

<div id="Experimental" class="tabcontent framed-content clearfix @(noTabLayout ? "no-tab" : "") @(IsOpen ? "" : "collapsed")">
	<h3 class="@(IsOpen ? "" : "h3-collapsed")"><a class="@(noTabLayout ? "collapsible-header" : "")" @onclick="(() => IsOpen = (!noTabLayout || !IsOpen))">Experimental Beta Flags</a></h3>
	@if (IsOpen)
	{
		<p>Test out features from 2000 years in the future - at your own risk!</p>
		<div class="col1">
			
			<div class="checkbox-cell"></div>
		</div>
		<div class="col2">
			<CheckBox UpdateToolTip="@UpdateToolTipID" IsEnabled="@Flags.Treasures" Id="OpenChestsInOrder" @bind-Value="Flags.OpenChestsInOrder">Open Chests in Order</CheckBox>
		</div>

  	<div class="clear-it"></div>
	}
</div>

@code {
	[Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
	[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
	[Parameter] public bool noTabLayout { get; set; }
	[Parameter] public bool IsOpen { get; set; } = true;

	async Task OnImportResourcePack(ChangeEventArgs e)
	{
		try
		{
			var content = await JSRuntime.InvokeAsync<string>("handleFileSelect", "importResourcePackInput");
			if (content == null || content == "") { return; }
			using (var stream = new MemoryStream(Convert.FromBase64String(content)))
			{
				Flags.LoadResourcePackFlags(stream);
			}
			Flags.ResourcePack = content;
		}
		catch (Exception x)
		{
			Console.WriteLine(x.ToString());
		}
		StateHasChanged();
	}

}
