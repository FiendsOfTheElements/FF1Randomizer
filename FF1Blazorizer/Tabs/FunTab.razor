@using FF1Lib;
@using Newtonsoft.Json;
@using System.Reflection;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<div id="fun" class="framed-content">
	<h3 class="centered">Fun %</h3>
	<p>Fun flags are not part of the standard flags string since they do not impact gameplay. The buttons at the bottom can be used to store your preferred fun % settings within your browser so that they will be automatically restored each time you visit the site.</p>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="funEnemyNamesCheckBox" @bind-Value="Flags.FunEnemyNames">Fun Enemy Names</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="teamSteakCheckBox" @bind-Value="Flags.TeamSteak">Team STEAK</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="changeLuteCheckBox" @bind-Value="Flags.ChangeLute">Multi-instrumentalist Sara</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="titanSnack" TItem="TitanSnack" @bind-Value="Flags.TitanSnack">Titan's Favorite Snack:</EnumDropDown>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="hurrayDwarfFate" TItem="Fate" @bind-Value="Flags.HurrayDwarfFate">Hurray Dwarf's Fate:</EnumDropDown>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="paletteSwapCheckBox" @bind-Value="Flags.PaletteSwap">Palette Swap</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="modernBattlefieldCheckBox" @bind-Value="Flags.ModernBattlefield">Modern Battlefield</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="thirdBattlePaletteCheckBox" @bind-Value="Flags.ThirdBattlePalette">Three Battle Palettes</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="partyMapmanSlot" TItem="MapmanSlot" @bind-Value="Flags.MapmanSlot">Map Character Slot:</EnumDropDown>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="musicDropDown" TItem="MusicShuffle" @bind-Value="Flags.Music">Music Shuffle:</EnumDropDown>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="disableDamageTileFlickerCheckBox" @bind-Value="Flags.DisableDamageTileFlicker">Disable Damage Tile Flicker</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="disableSpellCastFlashCheckBox" @bind-Value="Flags.DisableSpellCastFlash">Disable Spell Cast Flash</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="menuColorDropDown" TItem="MenuColor" @bind-Value="Flags.MenuColor">Menu Color:</EnumDropDown>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="accessibleSpellNamesCheckBox" IsEnabled="@(!Flags.GenerateNewSpellbook)" @bind-Value="Flags.AccessibleSpellNames">Accessible Spell Names</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="renounceAutosortCheckBox" @bind-Value="Flags.RenounceAutosort">Renounce Autosort</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="cropScreen" @bind-Value="Flags.CropScreen">Crop Friendly</CheckBox>

	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="renounceSpeedHackWipes" @bind-Value="Flags.OptOutSpeedHackWipes">Slow Screen Wipes</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="renounceSpeedHackMessages" @bind-Value="Flags.OptOutSpeedHackMessages">Slow Battle Messages</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="renounceSpeedHackDash" @bind-Value="Flags.OptOutSpeedHackDash">Slow Map Move</CheckBox>

	<ToolTipBox id="spriteSheetToolTipBox" UpdateToolTip="@UpdateToolTipID">@SpriteSheetMessage</ToolTipBox>
	<input type="file" id="spriteSheetInput" accept="image/*" @onchange="@OnSpriteSheetChanged" />
	<a class="styled-button" @onclick="@ClearCustomSprites">Clear saved sprites</a>
	<div class="checkbox-cell"></div>

	<a class="styled-button" @onclick="@SavePreferences">Save Preferences</a>
</div>


@code {
	[Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
	[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
	[Parameter] public Action<string> SetStatusMessage { get; set; }

	protected override async void OnInitialized()
	{
		Flags.Preferences = new Preferences();
		await LoadPreferences();
	}

	async Task SavePreferences()
	{
	        // For forwards compatability, load the existing preferences, then copy the new preferences on top.
		// This ensures that new keys introduced in future versions don't get lost.

                string prefs = await JSRuntime.InvokeAsync<string>("getFFRPreferences", "preferences");
		Dictionary<string, object> existingPrefs;
		if (prefs == "" || prefs == null) {
		  existingPrefs = new Dictionary<string, object>();
		} else {
                  existingPrefs = JsonConvert.DeserializeObject<Dictionary<string, object>>(prefs);
		}
		var properties = typeof(FF1Lib.Preferences).GetProperties(BindingFlags.Instance | BindingFlags.Public);
		foreach (var pi in properties) {
                  existingPrefs[pi.Name] = pi.GetValue(Flags.Preferences);
		}
	        string jsonprefs = JsonConvert.SerializeObject(existingPrefs);
		await JSRuntime.InvokeVoidAsync("setFFRPreferences", "preferences", jsonprefs);
		SetStatusMessage.Invoke("Preferences saved.");
	}

	async Task LoadPreferences() {
		string prefs = await JSRuntime.InvokeAsync<string>("getFFRPreferences", "preferences");
		if (prefs == "" || prefs == null) return;
		Flags.Preferences = JsonConvert.DeserializeObject<FF1Lib.Preferences>(prefs, new JsonSerializerSettings
		    {
		            Error = (se, ev) => { ev.ErrorContext.Handled = true; }
	            });
		if (Flags.Preferences.SpriteSheet != null) {
		  SpriteSheetMessage = "Using custom sprites.";
		}
		StateHasChanged();
	}

	private string SpriteSheetMessage { get; set; } = "Load custom player sprites:";

	async Task OnSpriteSheetChanged(ChangeEventArgs e)
	{
		Console.WriteLine("OnSpriteSheetChanged");
		Flags.SpriteSheet = await JSRuntime.InvokeAsync<string>("handleFileSelect", "spriteSheetInput");
		SpriteSheetMessage = "Using custom sprites.";
		StateHasChanged();
	}

	void ClearCustomSprites() {
	     Flags.SpriteSheet = null;
	     SpriteSheetMessage = "Load custom player sprites:";
	     StateHasChanged();
	}
}
