@using FF1Lib;
@using Newtonsoft.Json;
@using System.Reflection;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime


<div id="fun" class="framed-content">
	<p>Fun flags are not part of the standard flags string since they do not impact gameplay. Click on Save Preferences to store your settings.</p>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="funEnemyNamesCheckBox" @bind-Value="Flags.FunEnemyNames">Fun Enemy Names</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="teamSteakCheckBox" @bind-Value="Flags.TeamSteak">Team STEAK</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="changeLuteCheckBox" @bind-Value="Flags.ChangeLute">Multi-instrumentalist Sara</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="titanSnackDropDown" TItem="TitanSnack" @bind-Value="Flags.TitanSnack">Titan's Favorite Snack:</EnumDropDown>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="hurrayDwarfFateDropDown" TItem="Fate" @bind-Value="Flags.HurrayDwarfFate">Hurray Dwarf's Fate:</EnumDropDown>
    <CheckBox UpdateToolTip="@UpdateToolTipID" Id="randomShardNamesCheckBox" @bind-Value="Flags.randomShardNames">Random Shard Names</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="paletteSwapCheckBox" @bind-Value="Flags.PaletteSwap">Palette Swap</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="modernBattlefieldCheckBox" @bind-Value="Flags.ModernBattlefield">Modern Battlefield</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="thirdBattlePaletteCheckBox" @bind-Value="Flags.ThirdBattlePalette">Three Battle Palettes</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="partyMapmanSlotDropDown" TItem="MapmanSlot" @bind-Value="Flags.MapmanSlot">Map Character Slot:</EnumDropDown>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="musicDropDown" TItem="MusicShuffle" @bind-Value="Flags.Music">Music Shuffle:</EnumDropDown>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="alternateAirshipThemeCheckBox" @bind-Value="Flags.AlternateAirshipTheme">Alternate Airship Theme</CheckBox>
	<CheckBox UpdateToolTip="@UpdateToolTipID" Id="chaosBattleMusicCheckBox" @bind-Value="Flags.ChaosBattleMusic">Alternate Chaos Battle Theme</CheckBox>
	<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="menuColorDropDown" TItem="MenuColor" @bind-Value="Flags.MenuColor">Menu Color:</EnumDropDown>

	<ToolTipBox id="spriteSheetToolTipBox" UpdateToolTip="@UpdateToolTipID">@SpriteMessage</ToolTipBox>
	<input type="file" id="spriteSheetInput" accept="image/*" @onchange="@OnSpriteSheetChanged" />
	<a class="styled-button" @onclick="@ClearCustomSprites">Clear saved sprites</a>

	<div class="checkbox-cell"></div>

	<a class="styled-button" @onclick="@SavePreferences">Save Preferences</a>
</div>


@code {
	[Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
	[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
	[Parameter] public Action<string> SetStatusMessage { get; set; }
	[Parameter] public Action<string> SetSpriteMessage { get; set; }
	[Parameter] public string SpriteMessage { get; set; }

	async Task SavePreferences()
	{
		// For forwards compatability, load the existing preferences, then copy the new preferences on top.
		// This ensures that new keys introduced in future versions don't get lost.

		string prefs = await JSRuntime.InvokeAsync<string>("getFFRPreferences", "preferences");
		Dictionary<string, object> existingPrefs;
		if (prefs == "" || prefs == null)
		{
			existingPrefs = new Dictionary<string, object>();
		}
		else
		{
			existingPrefs = JsonConvert.DeserializeObject<Dictionary<string, object>>(prefs);
		}
		var properties = typeof(FF1Lib.Preferences).GetProperties(BindingFlags.Instance | BindingFlags.Public);
		foreach (var pi in properties)
		{
			existingPrefs[pi.Name] = pi.GetValue(Flags.Preferences);
		}
		string jsonprefs = JsonConvert.SerializeObject(existingPrefs);
		await JSRuntime.InvokeVoidAsync("setFFRPreferences", "preferences", jsonprefs);
		SetStatusMessage.Invoke("Preferences saved.");
	}

	async Task OnSpriteSheetChanged(ChangeEventArgs e)
	{
		Console.WriteLine("OnSpriteSheetChanged");
		Flags.SpriteSheet = await JSRuntime.InvokeAsync<string>("handleFileSelect", "spriteSheetInput");
		SetSpriteMessage("Using custom sprites.");
		StateHasChanged();
	}

	void ClearCustomSprites()
	{
		Flags.SpriteSheet = null;
		SetSpriteMessage("Load custom player sprites:");
		StateHasChanged();
	}
}
