@using FF1Lib;
@using RomUtilities;
@using FF1Lib.Procgen;
@inject IJSRuntime JSRuntime
@using Newtonsoft.Json;

<div id="Overworld" class="tabcontent framed-content clearfix @(noTabLayout ? "no-tab" : "") @(IsOpen ? "" : "collapsed")">
	<h3 class="@(IsOpen ? "" : "h3-collapsed")"><a class="@(noTabLayout ? "collapsible-header" : "")" @onclick="(() => IsOpen = (!noTabLayout || !IsOpen))">Game Mode & Overworld</a></h3>
	@if (IsOpen)
	{

			<div class="col1 full">
				<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="gameMode" TItem="GameModes" @bind-Value="Flags.GameMode">Game Mode:</EnumDropDown>
			</div>

		@if (Flags.GameMode == GameModes.Standard)
		{
			<div class="col1 full">
				<EnumDropDown UpdateToolTip="@UpdateToolTipID" Id="owMapExchange" TItem="OwMapExchanges" IsEnabled="Flags.SanityCheckerV2" @bind-Value="Flags.OwMapExchange">Overworld Map:</EnumDropDown>
				<p>@((MarkupString)StatusMessage)</p>
				<br>
			</div>

			@if (Flags.OwMapExchange == OwMapExchanges.None)
			{
				<div class="col1">
					<h4>Overworld Edits</h4>
					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="mapOpenProgressionCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapOpenProgression">Early Open Progression</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="mapOpenProgressionDwavesNWCheckBox"
							  IsEnabled="@(Flags.MapOpenProgression == true && Flags.OwMapExchange == OwMapExchanges.None)" Indent @bind-Value="Flags.MapDwarvesNorthwest">Extended Open Progression</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="mapOpenProgressionDocksCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapOpenProgressionDocks">Northern Docks</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="mapOpenProgressionFloaterDockCheckBox"
							  IsEnabled="@(Flags.MapOpenProgression == true && Flags.OwMapExchange == OwMapExchanges.None)" @bind-Value="Flags.MapAirshipDock">Ryukahn Desert Dock</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="bahamutCardiaDockCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapBahamutCardiaDock">Bahamut Cardia Dock</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="lefeinRiverDockCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapLefeinRiver">Lefein River Dock</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="bridgeToLefeinCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapBridgeLefein">Bridge to Lefein</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="gaiaMountainPassCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapGaiaMountainPass">Gaia Mountain Pass</TriStateCheckBox>

					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="riverToMelmondCheckBox"
							  IsEnabled="@(Flags.OwMapExchange == OwMapExchanges.None)"
							  @bind-Value="Flags.MapRiverToMelmond">River to Melmond</TriStateCheckBox>
					<div class="checkbox-cell"></div>
				</div>
			}
			else if (Flags.OwMapExchange == OwMapExchanges.GenerateNewOverworld || Flags.OwMapExchange == OwMapExchanges.LostWoods || Flags.OwMapExchange == OwMapExchanges.Desert)
			{
				<div class="col1">
					<h4>Map Generation Parameters</h4>
					Map Generation Seed:
					<br>
					<input type="text" style="width: calc(100% - 160px);" class="nes-input @(_mapgenSeedInputClass)" id="mapgenSeedInput"
							@onchange="@OnSeedInputChanged" value="@(_mapgenSeed)"
							disabled="@(!IsGenerateMap(Flags.OwMapExchange))" />
					<a class='styled-button @(IsGenerateMap(Flags.OwMapExchange) ? "" : "disabled-button")' @onclick="@OnNewSeed">New</a>
					<a class='styled-button @(IsGenerateMap(Flags.OwMapExchange) ? "" : "disabled-button")' @onclick="@OnClearSeed">Clear</a>
					<br>
					<br>
					<a class='styled-button @(IsGenerateMap(Flags.OwMapExchange) ? "" : "disabled-button")' @onclick="@OnGenerateMap">Generate Map</a>
					<a class='styled-button @(Flags.ReplacementMap != null && Flags.ReplacementMap.DecompressedMapRows != null ? "" : "disabled-button")' @onclick="@OnExportMap">Export Map</a>
					<br>
					<br>
				</div>
				@if (Flags.OwMapExchange == OwMapExchanges.GenerateNewOverworld)
				{
					<div class="col2">
						<h4>Options</h4>
						<CheckBox UpdateToolTip="@UpdateToolTipID" Id="usePregenCheckBox" @bind-Value="Flags.OwRandomPregen">Use Pregenerated Map</CheckBox>
						<CheckBox UpdateToolTip="@UpdateToolTipID" Id="shuffledAccessCheckBox" @bind-Value="Flags.OwShuffledAccess">Shuffled Access</CheckBox>
						<CheckBox UpdateToolTip="@UpdateToolTipID" Indent Id="unsafeStartCheckBox" IsEnabled="@Flags.OwShuffledAccess" @bind-Value="Flags.OwUnsafeStart">Unsafe Start</CheckBox>
						<div class="checkbox-cell"></div>
					</div>
				}
			}
			else if (Flags.OwMapExchange == OwMapExchanges.ImportCustomMap)
			{
				<div class="col1">
					<h4>Import Custom Map</h4>
					<input type="file" id="importMapInput" accept=".json" @onchange="@OnImportMap" />
					<div class="checkbox-cell"></div>
				</div>
			}

			@if (Flags.OwMapExchange != OwMapExchanges.Desert)
			{
				<div class="col2">
					<h4>Other Map Changes</h4>
					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="OWDamageTilesCheckBox" @bind-Value="Flags.OWDamageTiles">Marsh and Desert Tiles Deal Damage</TriStateCheckBox>
					<TriStateCheckBox UpdateToolTip="@UpdateToolTipID" Id="DamageTilesKillCheckBox" @bind-Value="Flags.DamageTilesKill">Lethal Damage Tiles</TriStateCheckBox>

					<div class="clear-it"></div>
				</div>
			}
		}
		else if (Flags.GameMode == GameModes.DeepDungeon)
		{
			<div class="col1 full">
				<div class="checkbox-cell"></div>
				<h4>Deep Dungeon Options</h4>
				<CheckBox UpdateToolTip="@UpdateToolTipID" Indent Id="DDProgressiveTilesets" @bind-Value="Flags.DDProgressiveTilesets">Progressive Tilesets</CheckBox>
				<CheckBox UpdateToolTip="@UpdateToolTipID" Indent Id="DDFiendOrbs" @bind-Value="Flags.DDFiendOrbs">Fiend Orbs</CheckBox>
				<EnumDropDown UpdateToolTip="@UpdateToolTipID" Indent Id="TailBahamutDropDown" TItem="TailBahamutMode" @bind-Value="Flags.TailBahamutMode">Bahamut and TAIL floors:</EnumDropDown>
				<div class="clear-it"></div>
			</div>
		}


	}
	</div>


	@code {
		[Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
		[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
		[Parameter] public bool noTabLayout { get; set; }
		[Parameter] public bool IsOpen { get; set; } = true;
		[CascadingParameter(Name="ShowModal")] public MainLayout.ShowModalT ShowModal { get; set; }
		[CascadingParameter(Name="SetGenerating")] public MainLayout.ShowModalT SetGenerating { get; set; }
		[CascadingParameter(Name="SetModalContent")] public MainLayout.SetContentT SetModalContent { get; set; }
		[CascadingParameter(Name="GetCancelled")] public MainLayout.GetCancelledT GetCancelled { get; set; }

		private string _mapgenSeed;
		private string _mapgenSeedInputClass = "";
		private string StatusMessage = "";

		protected override void OnInitialized()
		{
			Flags.PropertyChanged += (sender, args) => SyncDisplayMapgenSeed();
			SyncDisplayMapgenSeed();
		}

		void SyncDisplayMapgenSeed()
		{
			_mapgenSeed = $"{Flags.MapGenSeed,8:X8}";
			StateHasChanged();
		}

		bool IsGenerateMap(OwMapExchanges ex) {
			return (ex == OwMapExchanges.GenerateNewOverworld ||
			ex == OwMapExchanges.LostWoods ||
			ex == OwMapExchanges.Desert);
		}

		void OnNewSeed(MouseEventArgs e)
		{
			if (!IsGenerateMap(Flags.OwMapExchange)) {
				return;
			}
			ValidateSeed(Blob.Random(4).ToHex());
			StateHasChanged();
		}

		void OnClearSeed(MouseEventArgs e)
		{
			if (!IsGenerateMap(Flags.OwMapExchange)) {
				return;
			}
			ValidateSeed("00000000");
			StateHasChanged();
		}

		void OnSeedInputChanged(ChangeEventArgs e)
		{
			ValidateSeed((string)e.Value);
		}

		int currentStep;
		int maxSteps;
		string lastMessage = "";
		string modalContent = "";

		async Task Progress(string message="", int addMax=0) {
		      maxSteps += addMax;
		      currentStep += 1;
		      if (message != "") {
			 lastMessage = message;
		      }
		      modalContent = $"Progress: {currentStep}/{maxSteps}<br>{lastMessage}";
		      SetModalContent(modalContent + "<br>" + StatusMessage);

		      StateHasChanged();
		      await Task.Delay(1);
		      if (GetCancelled()) {
		         throw new OperationCanceledException();
		      }
		}

		async Task GenerateMap()
		{
		        this.currentStep = 0;
			this.maxSteps = 0;
			SetModalContent("");
			ShowModal(true);
			SetGenerating(true);

		        int effectiveSeed = Flags.MapGenSeed;
			var maprng = new MT19337((uint)effectiveSeed);

			try
			{
		                do {
				  try {
				    switch (Flags.OwMapExchange)
				    {
					case OwMapExchanges.GenerateNewOverworld:
					case OwMapExchanges.LostWoods:
						Flags.ReplacementMap = await NewOverworld.GenerateNewOverworld(maprng, Flags.OwMapExchange, Flags.OwShuffledAccess, Flags.OwUnsafeStart, this.Progress);
						break;
					case OwMapExchanges.Desert:
						Flags.ReplacementMap = DesertOfDeath.GenerateDesert(maprng);
						break;
				    }
				  } catch (FailedToGenerate) {
			            effectiveSeed = (int)maprng.Next() & 0x7FFFFFFF;
			            maprng = new MT19337((uint)effectiveSeed);
				  }
		                } while (Flags.ReplacementMap == null);
				StatusMessage = $"Success! checksum {Flags.ReplacementMap.ComputeChecksum()}";
				Flags.MapGenSeed = effectiveSeed;
			}
			catch (Exception x)
			{
				StatusMessage = x.Message;
				Console.WriteLine(x.ToString());
			}
			finally {
				await Progress("");
				SetGenerating(false);
			}
			StateHasChanged();
		}

		async Task OnGenerateMap(MouseEventArgs e) {
			if (!IsGenerateMap(Flags.OwMapExchange)) {
				return;
			}
			if (Flags.MapGenSeed == 0) {
				ValidateSeed(Blob.Random(4).ToHex());
			}

			StatusMessage = "Generating new map, this may take some time...";
			StateHasChanged();

			await GenerateMap();
		}

		void ValidateSeed(string seed)
		{
			if (seed == _mapgenSeed)
				return;

			if (seed.Length > 8)
			{
				_mapgenSeedInputClass = "is-error";
				return;
			}

			Flags.ReplacementMap = null;
			StatusMessage = "";

			_mapgenSeed = seed;
			try
			{
				var blb = Blob.FromHex(_mapgenSeed);
				Flags.MapGenSeed = ((blb[0]&0x7F) << 24) | (blb[1] << 16) | (blb[2] << 8) | blb[3];
				_mapgenSeed = $"{Flags.MapGenSeed,8:X8}";
				_mapgenSeedInputClass = "";
			}
			catch (Exception)
			{
				_mapgenSeedInputClass = "is-error";
			}
		}

		async Task OnImportMap(ChangeEventArgs e) {
			try {
				Flags.OwMapExchange = OwMapExchanges.ImportCustomMap;
				var content = await JSRuntime.InvokeAsync<string>("handleFileSelect", "importMapInput");
				if (content == null || content == "") { return; }
				var fileData = Convert.FromBase64String(content);
				Flags.ReplacementMap = JsonConvert.DeserializeObject<OwMapExchangeData>(System.Text.Encoding.UTF8.GetString(fileData));
				Flags.MapGenSeed = Flags.ReplacementMap.Seed;
				_mapgenSeed = $"{Flags.MapGenSeed,8:X8}";

				var checksum = Flags.ReplacementMap.ComputeChecksum();
				if (checksum != Flags.ReplacementMap.Checksum) {
					throw new Exception("Checksum did not match");
				}

				StatusMessage = $"Successfully imported map, checksum {Flags.ReplacementMap.Checksum}";
			} catch (Exception x) {
				StatusMessage = x.Message;
				Console.WriteLine(x.ToString());
			}
			StateHasChanged();
		}


		async Task OnExportMap(MouseEventArgs e) {
			if (Flags.ReplacementMap == null || Flags.ReplacementMap.DecompressedMapRows == null) {
				return;
			}

			Flags.ReplacementMap.Checksum = Flags.ReplacementMap.ComputeChecksum();
			Flags.ReplacementMap.Seed = Flags.MapGenSeed;
			Flags.ReplacementMap.FFRVersion = FF1Lib.FFRVersion.Version;

			var content = JsonConvert.SerializeObject(Flags.ReplacementMap, Formatting.Indented);
			var fileData = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(content));
			await JSRuntime.InvokeVoidAsync("downloadFile", $"FFR_map_{Flags.ReplacementMap.Checksum}.json", fileData);
		}
	}
