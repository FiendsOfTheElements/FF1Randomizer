@using FF1Lib;
@using Newtonsoft.Json;
@using System.Reflection;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime


<div id="fun" class="framed-content">
	<p>Quality of Life flags can help players with epilepsy, motion sickness, dyslexia, color blindness, or muscle memory.</p>
	<p>Note: Some QoL settings can cause potential speed disadvantages.</p>
    <CheckBox UpdateAction="@UpdateAction" Id="disableSpellCastFlashCheckBox" @bind-Value="Preferences.DisableSpellCastFlash">Disable Spell Cast Flash</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="disableDamageTileFlickerCheckBox" @bind-Value="Preferences.DisableDamageTileFlicker">Disable Damage Tile Flicker</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="disableDamageTileSFXCheckBox" @bind-Value="Preferences.DisableDamageTileSFX">Disable Damage Tile SFX</CheckBox>
	<EnumDropDown UpdateAction="@UpdateAction" Id="alternatePoisonSFXDropDown" TItem="PoisonSFX" @bind-Value="Preferences.AltPoisonSFX">Change Poison Status SFX:</EnumDropDown>
	<CheckBox UpdateAction="@UpdateAction" Id="disableAirshipSFXCheckBox" @bind-Value="Preferences.DisableAirshipSFX">Disable Airship SFX</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="uninterruptedMusicCheckBox" @bind-Value="Preferences.UninterruptedMusic">Uninterrupted Music</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="lockRespondRateCheckBox" @bind-Value="Preferences.LockRespondRate">Lock Respond Rate</CheckBox>
	<IntSlider UpdateAction="@UpdateAction" Indent Min="1" Max="8" Step="1" DisableTooltip IsEnabled="Preferences.LockRespondRate" Id="respondRate" @bind-Value="@Preferences.RespondRate">Respond Rate:</IntSlider>
	<CheckBox UpdateAction="@UpdateAction" Id="accessibleSpellNamesCheckBox" @bind-Value="Preferences.AccessibleSpellNames">Accessible Spell Names</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="cleanBlursedEquipmentNamesCheckBox" @bind-Value="Preferences.CleanBlursedEquipmentNames">Cleaner Blursed Names</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="shopInfoIconsCheckBox" @bind-Value="Preferences.ShopInfoIcons">Shop Information Icons</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="cropScreen" @bind-Value="Preferences.CropScreen">Crop Friendly</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="quickJoy2Reset" @bind-Value="Preferences.QuickJoy2Reset">Quick Controller 2 Reset</CheckBox>
    <div class="checkbox-cell"></div>
    <h5>Remove Unwanted Features:</h5>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceAutosortCheckBox" @bind-Value="Preferences.RenounceAutosort">Renounce Autosort</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceChestInfoCheckBox" @bind-Value="Preferences.RenounceChestInfo">Renounce Chest Info</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceCantHoldRed" @bind-Value="Preferences.RenounceCantHoldRed">Renounce Can't Hold Red</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceSpeedHackWipes" @bind-Value="Preferences.OptOutSpeedHackWipes">Slow Screen Wipes</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceSpeedHackMessages" @bind-Value="Preferences.OptOutSpeedHackMessages">Slow Battle Messages</CheckBox>
	<CheckBox UpdateAction="@UpdateAction" Id="renounceSpeedHackDash" @bind-Value="Preferences.OptOutSpeedHackDash">Slow Map Move</CheckBox>
	<div class="checkbox-cell"></div>

	<a class="styled-button" @onclick="@SavePreferences">Save Preferences</a>
</div>


@code {
	[Parameter] public FF1Lib.Preferences Preferences { get; set; }
	[Parameter] public Action<string, MouseEventArgs> UpdateToolTipID { get; set; }
	[Parameter]	public Action<string, string> UpdateAction { get; set; }
	[Parameter] public Action<string> SetStatusMessage { get; set; }

	async Task SavePreferences()
	{
		// For forwards compatability, load the existing preferences, then copy the new preferences on top.
		// This ensures that new keys introduced in future versions don't get lost.

		string prefs = await JSRuntime.InvokeAsync<string>("getFFRPreferences", "preferences");
		Dictionary<string, object> existingPrefs;
		if (prefs == "" || prefs == null)
		{
			existingPrefs = new Dictionary<string, object>();
		}
		else
		{
			existingPrefs = JsonConvert.DeserializeObject<Dictionary<string, object>>(prefs);
		}
		var properties = typeof(FF1Lib.Preferences).GetProperties(BindingFlags.Instance | BindingFlags.Public);
		foreach (var pi in properties)
		{
			existingPrefs[pi.Name] = pi.GetValue(Preferences);
		}
		string jsonprefs = JsonConvert.SerializeObject(existingPrefs);
		await JSRuntime.InvokeVoidAsync("setFFRPreferences", "preferences", jsonprefs);
		SetStatusMessage.Invoke("Preferences saved.");
	}
}
