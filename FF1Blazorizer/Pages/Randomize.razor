@page "/Randomize"
@page "/"
@using FF1Lib;
@using Microsoft.AspNetCore.Components.Web
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div id="main-content">
	<ToolTip @ref="ToolTipElement" ToolTipId="@ToolTipId" />
	<aside id="left-column">
		@if (!hideAnnouncement)
		{
			<AnnouncementBox SetHideAnnouncement="@SetHideAnnouncement" />
		}
		<FileTab Flags="@Flags" StatusMessage="@StatusMessage" SetStatusMessage="@SetStatusMessage" UpdateToolTipID="@UpdateToolTipID" showChaos="@showChaos" />
		<FunTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" SetStatusMessage="@SetStatusMessage" />
	</aside>

	<main id="right-column">
		<h1>Final Fantasy Randomizer</h1>
		@if (Flags.BlindSeed)
		{
			<BlindSeedTab Flags="@Flags" StatusMessage="@StatusMessage" SetStatusMessage="@SetStatusMessage" noTabLayout="@true" />
		}
		else if (noTabLayout)
		{
			<PresetsTab Flags="@Flags" SetStatusMessage="@SetStatusMessage" loadDefault="@loadDefault" SetDefaultLoaded="@SetDefaultLoaded" noTabLayout="@noTabLayout" presetName="@presetName" SetPresetName="@SetPresetName" />
			<GoalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ScaleTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<IncentivesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<MapsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<TreasuresTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ShopsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<EnemiesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<PartyTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ClassesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ItemEquipmentTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<AdjustmentsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ExperimentalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
			<ExpandArrow noTabLayout="@noTabLayout" SetTabLayout="@SetTabLayout" />
		}
		else
		{
			<BSTabGroup ShowEvent="@Show" HiddenEvent="@Hidden" HideEvent="@Hide" ShownEvent="@Shown">
				<div class="tab">
					<BSTabList IsVertical="true">
						<BSTab>
							<BSTabLabel>Presets</BSTabLabel>
							<BSTabContent>
								<PresetsTab Flags="@Flags" SetStatusMessage="@SetStatusMessage" loadDefault="@loadDefault" SetDefaultLoaded="@SetDefaultLoaded" noTabLayout="@noTabLayout" presetName="@presetName" SetPresetName="@SetPresetName" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Goal</BSTabLabel>
							<BSTabContent>
								<GoalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Scale</BSTabLabel>
							<BSTabContent>
								<ScaleTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Incentives</BSTabLabel>
							<BSTabContent>
								<IncentivesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Maps</BSTabLabel>
							<BSTabContent>
								<MapsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Treasures</BSTabLabel>
							<BSTabContent>
								<TreasuresTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Shops &amp; Magic</BSTabLabel>
							<BSTabContent>
								<ShopsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Enemies</BSTabLabel>
							<BSTabContent>
								<EnemiesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Party</BSTabLabel>
							<BSTabContent>
								<PartyTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Classes</BSTabLabel>
							<BSTabContent>
								<ClassesTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Gear &amp; Items</BSTabLabel>
							<BSTabContent>
								<ItemEquipmentTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Adjustments</BSTabLabel>
							<BSTabContent>
								<AdjustmentsTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Beta</BSTabLabel>
							<BSTabContent>
								<ExperimentalTab Flags="@Flags" UpdateToolTipID="@UpdateToolTipID" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
					</BSTabList>
				</div>
				<BSTabSelectedContent />
			</BSTabGroup>
			<ExpandArrow noTabLayout="@noTabLayout" SetTabLayout="@SetTabLayout" />
		}
	</main>
</div>

@code {

	[CascadingParameter] public bool showChaos { get; set; }
	//[Parameter] public bool showChaos { get; set; } = false;

	//private bool showChaos { get; set; }

	//void ShowChaos()
	//{
	//	showChaos = true;
	//	StateHasChanged();
	//}


	private FlagsViewModel Flags { get; set; } = new FlagsViewModel();
	private string ToolTipId = "unupdated";
	private ToolTip ToolTipElement;
	private string StatusMessage = "";
	private bool loadDefault = true;
	private bool noTabLayout = false;
	private bool noAnnoucement = true;  // set to false if there's an announcement
	private bool hideAnnouncement = false;
	private string presetName = "Untitled";


	protected override async void OnInitialized()
	{
		//string orbsOrder = "orbs easter egg order:\n";
		//for (int i = 0; i < orbsToMatch.Length; i++)
		//{
		//	orbsOrder += ((orbsToMatch[i] < 4) ? "turn off " + (orbsToMatch[i] + 1).ToString() : "turn on " + (orbsToMatch[i] - 3).ToString()) + "\n";
		//}
		//Console.WriteLine(orbsOrder);


		noTabLayout = await LocalStorage.GetItemAsync<bool>("tablayout");

		if (noAnnoucement)
		{
			hideAnnouncement = true;
		}
		else
		{
			// Announcement ID needs to be changed for each new events, also need to be changed in AnnouncementBox.razor
			//  both need to match, comment out for no announcement
			hideAnnouncement = await LocalStorage.GetItemAsync<bool>("announcement_st2021f");
		}
		Flags.PropertyChanged += (sender, args) => StateHasChanged();
		StateHasChanged();
	}

	private void UpdateToolTipID(string Id, MouseEventArgs e)
	{
		ToolTipId = Id;
		ToolTipElement.UpdatePos(ToolTipId, e);
		StateHasChanged();
	}

	void SetStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
	}

	void SetDefaultLoaded()
	{
		loadDefault = false;
	}

	void SetTabLayout(bool notab)
	{
		noTabLayout = notab;
		StateHasChanged();
	}

	void SetHideAnnouncement(bool switchannouncement)
	{
		hideAnnouncement = switchannouncement;
		StateHasChanged();
	}

	void SetPresetName(string preset)
	{
		presetName = preset;
	}

	private void Show(BSTabEvent e)
	{
		//Console.WriteLine($"Show   -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Shown(BSTabEvent e)
	{
		//Console.WriteLine($"Shown  -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hide(BSTabEvent e)
	{
		//Console.WriteLine($"Hide   ->  Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hidden(BSTabEvent e)
	{
		//Console.WriteLine($"Hidden -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	} }
