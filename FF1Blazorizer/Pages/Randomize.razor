@page "/Randomize"
@page "/"
@using FF1Lib;
@using Microsoft.AspNetCore.Components.Web
@using Newtonsoft.Json;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

	<div id="main-content" class="@(Preferences.BlandSite ? "" : "content px-4 tinted")">
	<ToolTip @ref="ToolTipElement" ToolTipId="@ToolTipId" />
	<aside id="left-column">

		<FileTab Flags="@Flags" Preferences="@Preferences" Flagstring="@flagstring" UpdateAction="@UpdateAction" UpdateSeed="@UpdateSeed" StatusMessage="@StatusMessage" SetStatusMessage="@SetStatusMessage" UpdateToolTipID="@UpdateToolTipID" showChaos="@showChaos" />

		<a class="nav-item nav-link fun @(FunEnabled ? "active" : "")" @onclick="(() => FunEnabled = true)" href="javascript:void(0);">Fun%</a>
		<a class="nav-item nav-link fun @(FunEnabled ? "" : "active")" @onclick="(() => FunEnabled = false)" href="javascript:void(0);">Quality of Life</a>

		@if (FunEnabled)
		{
			<FunTab Preferences="@Preferences" UpdateAction="@UpdateAction" SetStatusMessage="@SetStatusMessage" SetSpriteMessage="@SetSpriteMessage" SpriteMessage="@SpriteSheetMessage" />
		}
		else
		{
			<QoLTab Preferences="@Preferences" UpdateAction="@UpdateAction" SetStatusMessage="@SetStatusMessage" />
		}



	</aside>

	<main id="right-column">
		<h1>Final Fantasy Randomizer</h1>
		@if (Flags.BlindSeed)
		{
			<BlindSeedTab Flags="@Flags" UpdateAction="@UpdateAction" StatusMessage="@StatusMessage" SetStatusMessage="@SetStatusMessage" noTabLayout="@true" />
		}
		else if (noTabLayout)
		{
			<PresetsTab Flags="@Flags" UpdateAction="@UpdateAction" SetStatusMessage="@SetStatusMessage" loadDefault="@loadDefault" SetDefaultLoaded="@SetDefaultLoaded" noTabLayout="@noTabLayout" presetName="@presetName" SetPresetName="@SetPresetName" />
			<GoalTab Flags="@Flags" UpdateAction="@UpdateAction" Preferences="@Preferences" noTabLayout="@noTabLayout" />
			<ScaleTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<IncentivesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<OverworldTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<DungeonsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<TreasuresTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<ShopsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<EnemiesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<PartyTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<ClassesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<ItemEquipmentTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<AdjustmentsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<ExperimentalTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
			<ExpandArrow noTabLayout="@noTabLayout" SetTabLayout="@SetTabLayout" />
		}
		else
		{
			<BSTabGroup ShowEvent="@Show" HiddenEvent="@Hidden" HideEvent="@Hide" ShownEvent="@Shown">
				<div class="tab">
					<BSTabList IsVertical="true">
						<BSTab>
							<BSTabLabel>Presets</BSTabLabel>
							<BSTabContent>
								<PresetsTab Flags="@Flags" UpdateAction="@UpdateAction" SetStatusMessage="@SetStatusMessage" loadDefault="@loadDefault" SetDefaultLoaded="@SetDefaultLoaded" noTabLayout="@noTabLayout" presetName="@presetName" SetPresetName="@SetPresetName" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Goal</BSTabLabel>
							<BSTabContent>
								<GoalTab Flags="@Flags" Preferences="@Preferences" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Scale</BSTabLabel>
							<BSTabContent>
								<ScaleTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Incentives</BSTabLabel>
							<BSTabContent>
								<IncentivesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Mode &amp; World</BSTabLabel>
							<BSTabContent>
								<OverworldTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Maps</BSTabLabel>
							<BSTabContent>
								<DungeonsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>

						<BSTab>
							<BSTabLabel>Treasures</BSTabLabel>
							<BSTabContent>
								<TreasuresTab UpdateAction="@UpdateAction" Flags="@Flags"  noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Shops &amp; Magic</BSTabLabel>
							<BSTabContent>
								<ShopsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Enemies</BSTabLabel>
							<BSTabContent>
								<EnemiesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Party</BSTabLabel>
							<BSTabContent>
								<PartyTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Classes</BSTabLabel>
							<BSTabContent>
								<ClassesTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Gear &amp; Items</BSTabLabel>
							<BSTabContent>
								<ItemEquipmentTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Adjustments</BSTabLabel>
							<BSTabContent>
								<AdjustmentsTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
						<BSTab>
							<BSTabLabel>Experimental</BSTabLabel>
							<BSTabContent>
								<ExperimentalTab Flags="@Flags" UpdateAction="@UpdateAction" noTabLayout="@noTabLayout" />
							</BSTabContent>
						</BSTab>
					</BSTabList>
				</div>
				<BSTabSelectedContent />
			</BSTabGroup>
			<ExpandArrow noTabLayout="@noTabLayout" SetTabLayout="@SetTabLayout" />
		}
	</main>
</div>

@code {

	[CascadingParameter] public bool showChaos { get; set; }
	[CascadingParameter(Name="SetBlandSite")] public MainLayout.ShowModalT SetBlandSite { get; set; }

	private Flags Flags { get; set; } = new Flags();
	private Preferences Preferences { get; set; } = new Preferences();
	private string ToolTipId = "unupdated";
	private ToolTip ToolTipElement;
	private string StatusMessage = "";
	private bool loadDefault = true;
	private bool noTabLayout = false;
	private string presetName = "Untitled";
	private bool FunEnabled = true;
	private string SpriteSheetMessage { get; set; } = "Load custom player sprites:";
	private string flagstring = "";
	private string seed = "";

	protected override async void OnInitialized()
	{
		//string orbsOrder = "orbs easter egg order:\n";
		//for (int i = 0; i < orbsToMatch.Length; i++)
		//{
		//	orbsOrder += ((orbsToMatch[i] < 4) ? "turn off " + (orbsToMatch[i] + 1).ToString() : "turn on " + (orbsToMatch[i] - 3).ToString()) + "\n";
		//}
		//Console.WriteLine(orbsOrder);


		noTabLayout = await LocalStorage.GetItemAsync<bool>("tablayout");

		Flags.PropertyChanged += (sender, args) => StateHasChanged();

		Preferences = new Preferences();
		await LoadPreferences();
		SetBlandSite(Preferences.BlandSite);
		UpdateFlagstring();
		StateHasChanged();
	}

	async Task LoadPreferences()
	{
		string prefs = await JSRuntime.InvokeAsync<string>("getFFRPreferences", "preferences");
		if (prefs == "" || prefs == null) return;
		Preferences = JsonConvert.DeserializeObject<FF1Lib.Preferences>(prefs, new JsonSerializerSettings
		{
			Error = (se, ev) => { ev.ErrorContext.Handled = true; }
		});
		if (Preferences.SpriteSheet != null)
		{
			SpriteSheetMessage = "Using custom sprites.";
		}
		StateHasChanged();
	}
	private void UpdateAction(string action, string id)
	{
		if (action == "UpdateFlagstring")
		{
			UpdateFlagstring();
		}
		else if (action == "UpdateSeed")
		{
			UpdateSeed(id);
			StateHasChanged();
		}
		else if (action == "UpdateTooltip")
		{
			ToolTipId = id;
			ToolTipElement.UpdatePos(ToolTipId, null);
			StateHasChanged();
		}
	}
	private void UpdateToolTipID(string Id, MouseEventArgs e)
	{
		ToolTipId = Id;
		ToolTipElement.UpdatePos(ToolTipId, e);
		StateHasChanged();
	}

	void SetStatusMessage(string message)
	{
		StatusMessage = message;
		StateHasChanged();
	}

	void SetSpriteMessage(string message)
	{
		SpriteSheetMessage = message;
		StateHasChanged();
	}

	void SetDefaultLoaded()
	{
		loadDefault = false;
	}

	void SetTabLayout(bool notab)
	{
		noTabLayout = notab;
		StateHasChanged();
	}

	void SetPresetName(string preset)
	{
		presetName = preset;
	}

	private void Show(BSTabEvent e)
	{
		//Console.WriteLine($"Show   -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Shown(BSTabEvent e)
	{
		//Console.WriteLine($"Shown  -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hide(BSTabEvent e)
	{
		//Console.WriteLine($"Hide   ->  Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}
	private void Hidden(BSTabEvent e)
	{
		//Console.WriteLine($"Hidden -> Activated: {e.Activated?.Id.ToString()} , Deactivated: {e.Deactivated?.Id.ToString()}");
	}

	private async void UpdateFlagstring()
	{
		flagstring = Flags.Encoded;
		string[] args = new string[2] { seed, Flags.Encoded };
		await JSRuntime.InvokeAsync<Task>("updateHistory", args);
		StateHasChanged();
	}

	private void UpdateSeed(string value)
	{
		seed = value;
		StateHasChanged();
	}

}
