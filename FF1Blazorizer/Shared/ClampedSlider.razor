<div class="row">
    <div class="col-md-5">
        <p class="@DisabledClass @IndentClass">@ChildContent</p>
    </div>
    <div class="col-xs-6 col-md-3">
        <div class="checkbox-cell">
            <div class="btn-group-toggle" data-toggle="buttons">
                <input type="radio" name="@Name" value="2" checked="@checked2" hidden>
                <input type="radio" name="@Name" value="1" checked="@checked1" hidden>
                <input type="radio" name="@Name" value="0" checked="@checked0" hidden>
                <input type="image" src="@image" @onclick="@onclick" id="@Id" class="tri-state" disabled="@(!IsEnabled)" />  <label for="@Id" class="@DisabledClass">@DisplayText</label>

            </div>
        </div>

    </div>
    <div class="col-xs-6 col-md-4">
        <Slider Value="@Scale" ValueChanged="onValueChanged" Min="@Min" Max="@Max" Step="@Step"></Slider>
        <input type="image" src="/images/help.png" class="btn-group-help" title="Show Help" @onclick="@ShowToolTip" id="@Id" />
    </div>
</div>

@code
{
    private void ShowToolTip(MouseEventArgs e)
    {
		UpdateAction?.Invoke("UpdateTooltip", Id);
    }

    private void HideToolTip(MouseEventArgs e)
    {
		UpdateAction?.Invoke("UpdateTooltip", "");
    }

    [Parameter]
    public Action<string, MouseEventArgs> UpdateToolTip { get; set; }
	[Parameter]
	public Action<string, string> UpdateAction { get; set; }


    [Parameter]
    public bool Indent { get; set; }
    private string IndentClass => Indent ? "indent" : "";

    [Parameter]
    public bool? IsEnabled { get; set; } = true;
    private bool Disabled => !(IsEnabled ?? true);
    private string DisabledClass => (IsEnabled ?? true) ? "" : "disabled";

    [Parameter]
    public string Id { get; set; }

    private string image => checked0 ? "/images/true.png" : (checked1 ? "/images/false.png" : "/images/random.gif");
    private string DisplayText => (Clamp != null ?
    Math.Round(100.0 / (Clamp ?? true ? 1.0 : Scale)).ToString() :
    Math.Round(100.0 / Scale).ToString() + "% OR " + Math.Round(100.0 / 1.0).ToString()
    ) + "% - " + Math.Round(100.0 * Scale).ToString() + "%";

    [Parameter]
    public bool? Clamp { get; set; } = false;
    [Parameter]
    public EventCallback<bool?> ClampChanged { get; set; }

    [Parameter]
    public double Scale { get; set; }
    [Parameter]
    public EventCallback<double> ScaleChanged { get; set; }

    public async void onValueChanged(double Value)
    {
		UpdateAction?.Invoke("UpdateFlagstring", "");
        await ScaleChanged.InvokeAsync(Value);
    }

    [Parameter]
    public double Min { get; set; }
    [Parameter]
    public double Max { get; set; }
    [Parameter]
    public double Step { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private bool checked0 => Clamp ?? false;
    private bool checked1 => !Clamp ?? false;
    private bool checked2 => Clamp == null;

    [Parameter]
    public bool Name { get; set; }

    void onclick()
    {
        if (Clamp == false)
        {
            Clamp = true;
        }
        else if (Clamp == true)
        {
            Clamp = null;
        }
        else
        {
            Clamp = false;
        }

		UpdateAction?.Invoke("UpdateFlagstring", "");
        ClampChanged.InvokeAsync(Clamp);

    }

}
