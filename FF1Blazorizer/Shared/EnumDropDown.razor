@typeparam TItem

<div class="checkbox-cell dropdown-cell @DisabledClass">

	<span id="@Id" class="@IndentClass @DisabledClass">@ChildContent</span>

	<div class="oneline">
		<select value="@Value" @onchange="@onchange" disabled="@(!IsEnabled)">
			@foreach (var value in Enum.GetValues(typeof(TItem)))
			{
				<option value="@value">@(((Enum)value).ToName())</option>
			}
		</select>
		@if (!DisableTooltip)
		{
			<input type="image" src="/images/help.png" class="btn-group-help" style="vertical-align: middle" title="Show Help" @onclick="@ShowToolTip" id="@Id" />
		}
	</div>
</div>

@code
{

	[Parameter]
	public TItem Value { get; set; }
	[Parameter]
	public EventCallback<TItem> ValueChanged { get; set; }
	void onchange(ChangeEventArgs e)
	{
		Value = (TItem)Enum.Parse(typeof(TItem), e.Value.ToString());
		ValueChanged.InvokeAsync(Value);
		UpdateAction?.Invoke("UpdateFlagstring", "");
	}

	private void ShowToolTip(MouseEventArgs e)
	{
		UpdateAction?.Invoke("UpdateTooltip", Id);
	}

	private void HideToolTip(MouseEventArgs e)
	{
		UpdateAction?.Invoke("UpdateTooltip", "");
	}

	[Parameter]
	public Action<string, MouseEventArgs> UpdateToolTip { get; set; }
	[Parameter]
	public Action<string, string> UpdateAction { get; set; }


	[Parameter]
	public bool Indent { get; set; }
	private string IndentClass => Indent ? "indent" : "";

	[Parameter]
	public bool? IsEnabled { get; set; } = true;
	private string DisabledClass => (IsEnabled ?? true) ? "" : "disabled";

	[Parameter]
	public string Id { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public bool DisableTooltip { get; set; }

}
