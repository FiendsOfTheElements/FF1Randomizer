	<div class="row">
		<div class="col1">
			<div class="@DisabledClass @IndentClass">@ChildContent</div>
			<div class="checkbox-cell">
				<div class="btn-group-toggle" data-toggle="buttons">
					<input type="radio" name="@Name" value="2" checked="@checked2" hidden>
					<input type="radio" name="@Name" value="1" checked="@checked1" hidden>
					<input type="radio" name="@Name" value="0" checked="@checked0" hidden>
					<!-- <input type="image" src="@image" @onclick="@onclick" id="@Id" class="tri-state" disabled="@(!IsEnabled)" /> -->
					<label for="@Id" class="@DisabledClass">@DisplayText</label>
				</div>
			</div>
		</div>
		<div class="col2">
			<div id="rc-@Id">
				@(new MarkupString($@"<style>
				#rc-{Id} > input[type='range'] {{
					background: var(--track-background);
					pointer-events: none;
				}}
				#rc-{Id} > input[name='low-range'] {{
					position: absolute;
				}}
				#rc-{Id} > input[name='low-range']::-webkit-slider-thumb {{
					position: relative;
				}}
				#rc-{Id} > input[name='high-range'] {{
					position: relative;
					--track-background: linear-gradient(to right, transparent {100 * (ValueLow - MinValue) / (MaxValue - MinValue) + 1}%, var(--range-color) 0, var(--range-color) {100 * (ValueHigh - MinValue) / (MaxValue - MinValue) - 1}%, transparent 0 ) no-repeat 0 45% / 100% 40%;
					clip-path: polygon({(ValueLow + ValueHigh) / (MaxValue - MinValue) + 1}% 0, 100% 0, 100% 100%, {(ValueLow + ValueHigh) / (MaxValue - MinValue) + 1}% 100%);
				}}
				#rc-{Id} > input[type='range']::-webkit-slider-runnable-track {{
					background: var(--track-background);
				}}
			</style>"))
				<input name="low-range" type="range" min="@MinValue" max="@MaxValue" step="@Step" @bind="@ValueLow" @bind:event="onchange" />
				<input name="high-range" type="range" min="@MinValue" max="@MaxValue" step="@Step" @bind="@ValueHigh" @bind:event="onchange" />
				@if (!DisableTooltip)
				{
	<input type="image" src="/images/help.png" style="margin-left: 10px" class="btn-group-help" title="Show Help" @onclick="@ShowToolTip" id="@Id" />
}
			</div>
		</div>
	</div>


	@code
{ //clamp fields
				[Parameter]
				public bool? Clamp { get; set; } = false;
				[Parameter]
				public EventCallback<bool?> ClampChanged { get; set; }

				private bool checked0 => Clamp ?? false;
				private bool checked1 => !Clamp ?? false;
				private bool checked2 => Clamp == null;

				[Parameter]
				public bool Name { get; set; }

				void onclick()
				{
					if (Clamp == false)
					{
						Clamp = true;
					}
					else if (Clamp == true)
					{
						Clamp = null;
					}
					else
					{
						Clamp = false;
					}
					ClampChanged.InvokeAsync(Clamp);
				}

				private string image => checked0 ? "/images/true.png" : (checked1 ? "/images/false.png" : "/images/random.gif");

				[Parameter]
				public bool Indent { get; set; }
				private string IndentClass => Indent ? "indent" : "";

				[Parameter]
				public bool? IsEnabled { get; set; } = true;
				private bool Disabled => !(IsEnabled ?? true);
				private string DisabledClass => (IsEnabled ?? true) ? "" : "disabled";

				[Parameter]
				public RenderFragment ChildContent { get; set; }

				private string DisplayText =>
					(
					Clamp == null ?
						_valueLow + "% - " + _valueHigh + "% OR " +
						ClampValue + "% - " + Math.Max(_valueHigh, ClampValue) + "%" :
						((Clamp ?? true ? ClampValue : _valueLow).ToString() + "% - " + (Clamp ?? true ? Math.Max(_valueHigh, ClampValue) : _valueHigh)) + "%" + " (" + (int)Math.Sqrt(_valueLow * _valueHigh) + "%)"
					);

				//slider fields
				int _valueLow = 20;
				int _valueHigh = 500;
				[Parameter] public int MinValue { get; set; } = 20;
				[Parameter] public int MaxValue { get; set; } = 500;
				[Parameter] public int Step { get; set; } = 10;
				[Parameter] public int ClampValue { get; set; } = 100;
				[Parameter]
				public int ValueLow
				{
					get => _valueLow;
					set
					{
						if (_valueLow.Equals(value))
							return;

						if (value >= _valueHigh)
						{
							_valueLow = _valueHigh;
						}
						else
						{
							_valueLow = value;
						}

						UpdateAction?.Invoke("UpdateFlagstring", "");
						ValueLowChanged.InvokeAsync(_valueLow);
					}
				}
				[Parameter]
				public int ValueHigh
				{
					get => _valueHigh;
					set
					{
						if (_valueHigh.Equals(value))
							return;

						if (value <= _valueLow)
						{
							_valueHigh = _valueLow;
						}
						else
						{
							_valueHigh = value;
						}

						UpdateAction?.Invoke("UpdateFlagstring", "");
						ValueHighChanged.InvokeAsync(_valueHigh);
					}
				}
				[Parameter] public EventCallback<int> ValueLowChanged { get; set; }
				[Parameter] public EventCallback<int> ValueHighChanged { get; set; }
				[Parameter]
				public string Id { get; set; }

				//tooltip section
				[Parameter]
				public bool DisableTooltip { get; set; }

				private void ShowToolTip(MouseEventArgs e)
				{
					UpdateAction?.Invoke("UpdateTooltip", Id);
				}

				private void HideToolTip(MouseEventArgs e)
				{
					UpdateAction?.Invoke("UpdateTooltip", "");
				}


				[Parameter]
				public Action<string, MouseEventArgs> UpdateToolTip { get; set; }

	[Parameter]
	public Action<string, string> UpdateAction { get; set; }
 }
