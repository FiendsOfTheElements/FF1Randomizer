@using Microsoft.AspNetCore.Components.Web

@if (BareMode)
{
	<input type="range" value="@Value" @onchange="@onchange" min="@Min" max="@Max" step="@Step" />
}
else if(DoubleCol)
{
<BSContainer>
	<BSRow>
		<BSCol LG="6">
				<span class="@DisabledClass @IndentClass">@ChildContent @Value</span>
		</BSCol>
		<div class="col-slider">
			<input class="@DisabledClass" type="range" value="@Value" @onchange="@onchange" min="@Min" max="@Max" step="@Step" />
			@if (!DisableTooltip)
			{
				<input type="image" src="/images/help.png" class="btn-group-help" title="Show Help" @onclick="@ShowToolTip" id="@Id" />
			}
		</div>
	</BSRow>
</BSContainer>
}
else
{
<BSContainer>
	<BSRow>
			<span class="@DisabledClass @IndentClass">@ChildContent @Value</span>
	</BSRow>
	<BSRow>
		<input class="@DisabledClass indent" type="range" value="@Value" @onchange="@onchange" min="@Min" max="@Max" step="@Step" />
		@if (!DisableTooltip)
		{
			<input type="image" src="/images/help.png" class="btn-group-help" title="Show Help" @onclick="@ShowToolTip" id="@Id" />
		}
	</BSRow>
</BSContainer>
}


@code
{
	private void ShowToolTip(MouseEventArgs e)
	{
		UpdateAction?.Invoke("UpdateTooltip", Id);
	}

	private void HideToolTip(MouseEventArgs e)
	{
		UpdateAction?.Invoke("UpdateTooltip", "");
	}

	[Parameter]
	public Action<string, MouseEventArgs> UpdateToolTip { get; set; }
	[Parameter]
	public Action<string, string> UpdateAction { get; set; }

	[Parameter]
	public bool Indent { get; set; }
	public string IndentClass => Indent ? "indent" : "";

	[Parameter]
	public bool DoubleCol { get; set; }

	[Parameter]
	public bool BareMode { get; set; } = false;

	[Parameter]
	public bool? IsEnabled { get; set; } = true;
	public bool Disabled => !(IsEnabled ?? true);
	private string DisabledClass => (IsEnabled ?? true) ? "" : "disabled";

	[Parameter]
	public string Id { get; set; }

	[Parameter]
	public int Value { get; set; }
	[Parameter]
	public EventCallback<int> ValueChanged { get; set; }
	void onchange(ChangeEventArgs e)
	{
		Value = int.Parse((string)e.Value);
		ValueChanged.InvokeAsync(Value);
		UpdateAction?.Invoke("UpdateFlagstring", "");
	}

	[Parameter]
	public int Min { get; set; }
	[Parameter]
	public int Max { get; set; }
	[Parameter]
	public int Step { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	[Parameter]
	public bool DisableTooltip { get; set; }
}
